{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar multiaddr = require('multiaddr');\nvar objectToCamel = require('../lib/object-to-camel.js');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nconst createQuery = configure.configure(api => {\n  async function* query(peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (let message of res.ndjson()) {\n      message = objectToCamel.objectToCamel(message);\n      message.responses = (message.responses || []).map(({\n        ID,\n        Addrs\n      }) => ({\n        id: ID,\n        addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n      }));\n      yield message;\n    }\n  }\n  return query;\n});\nexports.createQuery = createQuery;","map":{"version":3,"names":["Object","defineProperty","exports","value","multiaddr","require","objectToCamel","configure","toUrlSearchParams","createQuery","api","query","peerId","options","res","post","signal","searchParams","arg","toString","headers","message","ndjson","responses","map","ID","Addrs","id","addrs","a","Multiaddr"],"sources":["C:/Users/Vendrell/Desktop/Project_v16/App/node_modules/ipfs-http-client/cjs/src/dht/query.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar multiaddr = require('multiaddr');\nvar objectToCamel = require('../lib/object-to-camel.js');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nconst createQuery = configure.configure(api => {\n  async function* query(peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (let message of res.ndjson()) {\n      message = objectToCamel.objectToCamel(message);\n      message.responses = (message.responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n      }));\n      yield message;\n    }\n  }\n  return query;\n});\n\nexports.createQuery = createQuery;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIC,aAAa,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AACxD,IAAIE,SAAS,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,gCAAgC,CAAC;AAEjE,MAAMI,WAAW,GAAGF,SAAS,CAACA,SAAS,CAACG,GAAG,IAAI;EAC7C,gBAAgBC,KAAKA,CAACC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC1C,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,WAAW,EAAE;MACtCC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAET,iBAAiB,CAACA,iBAAiB,CAAC;QAChDU,GAAG,EAAEN,MAAM,CAACO,QAAQ,CAAC,CAAC;QACtB,GAAGN;MACL,CAAC,CAAC;MACFO,OAAO,EAAEP,OAAO,CAACO;IACnB,CAAC,CAAC;IACF,WAAW,IAAIC,OAAO,IAAIP,GAAG,CAACQ,MAAM,CAAC,CAAC,EAAE;MACtCD,OAAO,GAAGf,aAAa,CAACA,aAAa,CAACe,OAAO,CAAC;MAC9CA,OAAO,CAACE,SAAS,GAAG,CAACF,OAAO,CAACE,SAAS,IAAI,EAAE,EAAEC,GAAG,CAAC,CAAC;QAACC,EAAE;QAAEC;MAAK,CAAC,MAAM;QAClEC,EAAE,EAAEF,EAAE;QACNG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAE,EAAEF,GAAG,CAACK,CAAC,IAAI,IAAIzB,SAAS,CAAC0B,SAAS,CAACD,CAAC,CAAC;MAC1D,CAAC,CAAC,CAAC;MACH,MAAMR,OAAO;IACf;EACF;EACA,OAAOV,KAAK;AACd,CAAC,CAAC;AAEFT,OAAO,CAACO,WAAW,GAAGA,WAAW"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vendrell\\\\Desktop\\\\Project_v14\\\\App\\\\src\\\\Components\\\\Publisher.js\";\nimport React from \"react\";\nimport { COLORS } from \"./Colors\";\nimport SongCard from \"./SongCard\";\nimport AddSongCard from \"./AddSongCard\";\nimport Loader from \"react-loader-spinner\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophone, faPlusSquare, faBuilding } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Publisher extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      artistID: \"\",\n      artistsIDSong: [],\n      publisherID: \"\",\n      totalEarnings: \"\",\n      purchased_times: 0,\n      songIDs: [],\n      songs: [],\n      form: false,\n      searchQuery: \"\"\n    };\n    this.openForm = this.openForm.bind(this);\n    this.closeForm = this.closeForm.bind(this);\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n  }\n  componentDidMount() {\n    this.loadPublisherDetails().then(() => {\n      console.log(\"Loaded Publisher's Details\", this.state);\n      this.loadSongDetails().then(() => {\n        console.log(\"Loaded Publisher's Songs\");\n      });\n    });\n  }\n  async loadPublisherDetails() {\n    try {\n      const contractInstance = await this.props.contract.deployed();\n      const userType = await contractInstance.checkUserType.call({\n        from: this.props.account\n      });\n      console.log(\"User Type\", userType);\n      const publisherDetails = await contractInstance.getPublisherDetails.call({\n        from: this.props.account\n      });\n      let songList = [];\n      for (let i = 0; i < publisherDetails[3].length; i++) {\n        songList.push(publisherDetails[3][i].toString());\n      }\n      this.setState({\n        publisherID: publisherDetails[0].toString(),\n        name: publisherDetails[2].toString(),\n        songIDs: songList\n      });\n    } catch (error) {\n      console.error(\"Failed to load publisher details:\", error);\n    }\n  }\n  async getArtistName(artistID) {\n    try {\n      const contractInstance = await this.props.contract.deployed();\n      // console.log('getArtistName call');\n\n      // Correctly pass the artistID to the smart contract function\n      const getArtistName = await contractInstance.getArtistNameByID(artistID, {\n        from: this.props.account\n      });\n      console.log('artistID is\\n', artistID);\n      console.log('getArtistName', getArtistName);\n      return getArtistName; // Assuming the function returns the artistName directly\n    } catch (error) {\n      console.error('getArtistName Error:', error);\n      return ''; // Return an empty string or handle the error as needed\n    }\n  }\n  async loadPurchasedTimes(_songID) {\n    console.log(\"Into Purchased Times\");\n    console.log(\"songID:\", _songID);\n    let song_id = parseInt(_songID);\n    const contractInstance = await this.props.contract.deployed();\n    // Assuming getSongPurchasedTimes now returns a struct with personalCount and commercialCount\n    const purchaseCounts = await contractInstance.getSongPurchasedTimes(song_id, {\n      from: this.props.account\n    });\n    console.log(\"Purchased times for song ID\", song_id, \":\", purchaseCounts);\n\n    // Extract personal and commercial purchase counts\n    const personalCount = purchaseCounts[0];\n    const commercialCount = purchaseCounts[1];\n\n    // You can now use personalCount and commercialCount as needed\n    // For example, you might want to update the state or display these counts in the UI\n\n    return {\n      personalCount,\n      commercialCount\n    };\n  }\n  async loadSongDetails() {\n    console.log(\"Entering loadSongDetails function\");\n    const contractInstance = await this.props.contract.deployed();\n    console.log(\"Contract instance deployed successfully\");\n    let songInfoList = [];\n    console.log('Number of song IDs to process:', this.state.songIDs.length);\n    for (let i = 0; i < this.state.songIDs.length; i++) {\n      console.log(`Processing song ID at index ${i}:`, this.state.songIDs[i]);\n      let songDetails = await contractInstance.getSongDetails(this.state.songIDs[i], {\n        from: this.props.account\n      });\n      console.log(\"Song Details fetched for ID:\", songDetails[0]);\n      console.log(\"Sending song ID to loadPurchasedTimes:\", this.state.songIDs[i]);\n\n      // Retrieve both personal and commercial purchase counts\n      let purchaseCounts = await contractInstance.getSongPurchaseCounts(this.state.songIDs[i], {\n        from: this.props.account\n      });\n      console.log('Purchased times for song ID', this.state.songIDs[i], ':', purchaseCounts);\n\n      // Extract the artist ID from songDetails[8] and convert it to a string if necessary\n      let artistIDString = songDetails[8].toString();\n      console.log('artistIDString\\n', artistIDString);\n      let artistIDArray = artistIDString.split(',').map(Number);\n      console.log('artistIDArray\\n', artistIDArray, '\\n', typeof artistIDArray);\n      let artistNames = [];\n      for (let i = 0; i < artistIDArray.length; i++) {\n        console.log('Artist ID:', artistIDArray[i]);\n        let artistName = await contractInstance.getArtistNameByID(artistIDArray[i], {\n          from: this.props.account\n        });\n        console.log('Artist name fetched:', artistName);\n        artistNames.push(artistName);\n      }\n      console.log('timesPurchasedPersonal', purchaseCounts[0].toString());\n      console.log('timesPurchasedCommercial', purchaseCounts[1].toString());\n      let royaltyPercent = songDetails[5]; // Assuming songDetails[5] is the royalty percent\n      let personalPricing = songDetails[3]; // Assuming songDetails[3] is the personal pricing\n      let commercialPricing = songDetails[4];\n      console.log(\"royaltyPercent\", parseInt(royaltyPercent));\n      let publisherEarningsPerSongPurchase_Personal = personalPricing * (100 - royaltyPercent) / 100;\n      console.log(\"Publisher Split Personal\", publisherEarningsPerSongPurchase_Personal);\n      let publisherEarningsPerSongPurchase_Commercial = commercialPricing * (100 - royaltyPercent) / 100;\n      console.log(\"Publisher Split Commercial\", publisherEarningsPerSongPurchase_Commercial);\n      let publisherEarningsPerSongTotal_Personal = purchaseCounts[0] * publisherEarningsPerSongPurchase_Personal;\n      let publisherEarningsPerSongTotal_Commercial = purchaseCounts[1] * publisherEarningsPerSongPurchase_Commercial;\n      console.log(\"Revenue Personal Total for each song:\", publisherEarningsPerSongTotal_Personal);\n      console.log(\"Revenue Commercial Total for each song:\", publisherEarningsPerSongTotal_Commercial);\n      console.log(\"royaltyPercent\", parseInt(royaltyPercent));\n      songInfoList.push({\n        'name': songDetails[2],\n        'genre': songDetails[7],\n        'hash': songDetails[6],\n        'cost_personal': songDetails[3].toString(),\n        'cost_commercial': songDetails[4].toString(),\n        'artistsIDSong': songDetails[8].toString(),\n        'timesPurchasedPersonal': purchaseCounts[0].toString(),\n        // Personal purchase count\n        'timesPurchasedCommercial': purchaseCounts[1].toString(),\n        // Commercial purchase count\n        'artist_name': artistNames,\n        'publisherEarningsPerSongPurchase_Personal': publisherEarningsPerSongPurchase_Personal.toString(),\n        // Revenue from personal purchases\n        'publisherEarningsPerSongPurchase_Commercial': publisherEarningsPerSongPurchase_Commercial.toString()\n      });\n      this.state.purchased_times += parseInt(purchaseCounts[0]) + parseInt(purchaseCounts[1]);\n      this.state.totalEarnings += parseInt(publisherEarningsPerSongTotal_Personal) + parseInt(publisherEarningsPerSongTotal_Commercial);\n    }\n    this.setState({\n      songs: songInfoList\n    });\n    console.log(\"State updated with songInfoList\");\n  }\n  openForm() {\n    this.setState({\n      form: true\n    });\n  }\n  closeForm() {\n    this.setState({\n      form: false\n    });\n  }\n  handleSearchChange(event) {\n    this.setState({\n      searchQuery: event.target.value\n    });\n  }\n  render() {\n    if (this.state.publisherID === \"\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.main,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Hello\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Loader, {\n          type: \"Bars\",\n          color: COLORS.black\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this);\n    } else {\n      // Filter songs based on the search query\n      const filteredSongs = this.state.songs.filter(song => song.name.toLowerCase().includes(this.state.searchQuery.toLowerCase()));\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.main,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.info,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faBuilding\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 29\n            }, this), \" \", this.state.name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\" Publisher ID : \", this.state.publisherID, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\" Total Songs Sold : \", this.state.purchased_times, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search by song name...\",\n          value: this.state.searchQuery,\n          onChange: this.handleSearchChange,\n          className: \"form-control mb-3 w-75\" // Bootstrap classes for styling\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.box,\n          children: filteredSongs.map((item, i) => /*#__PURE__*/_jsxDEV(SongCard, {\n            type: \"publisher\",\n            name: item.name,\n            genre: item.genre,\n            cost: item.cost_personal,\n            cost_personal: item.cost_personal,\n            cost_commercial: item.cost_commercial,\n            likes: item.timesPurchasedPersonal,\n            times_personal_purchased: item.timesPurchasedPersonal,\n            times_commercial_purchased: item.timesPurchasedCommercial,\n            hash: item.hash\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-dark btn-lg \",\n          onClick: () => {\n            this.openForm();\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Add Song \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faPlusSquare\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 39\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AddSongCard, {\n          contract: this.props.contract,\n          ipfs: this.props.ipfs,\n          account: this.props.account,\n          form: this.state.form,\n          closeForm: this.closeForm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this);\n    }\n  }\n}\nconst styles = {\n  main: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100vh\",\n    gap: \"5%\",\n    background: COLORS.white\n  },\n  info: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  box: {\n    height: \"50%\",\n    width: \"80%\",\n    padding: \"2%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    borderRadius: \"30px\",\n    border: \"3px solid\",\n    overflow: \"auto\",\n    gap: \"2%\",\n    boxShadow: \"2px 5px 2px #191919\",\n    borderColor: COLORS.black,\n    backgroundColor: COLORS.white\n  }\n};\nexport default Publisher;","map":{"version":3,"names":["React","COLORS","SongCard","AddSongCard","Loader","FontAwesomeIcon","faMicrophone","faPlusSquare","faBuilding","jsxDEV","_jsxDEV","Publisher","Component","constructor","props","state","name","artistID","artistsIDSong","publisherID","totalEarnings","purchased_times","songIDs","songs","form","searchQuery","openForm","bind","closeForm","handleSearchChange","componentDidMount","loadPublisherDetails","then","console","log","loadSongDetails","contractInstance","contract","deployed","userType","checkUserType","call","from","account","publisherDetails","getPublisherDetails","songList","i","length","push","toString","setState","error","getArtistName","getArtistNameByID","loadPurchasedTimes","_songID","song_id","parseInt","purchaseCounts","getSongPurchasedTimes","personalCount","commercialCount","songInfoList","songDetails","getSongDetails","getSongPurchaseCounts","artistIDString","artistIDArray","split","map","Number","artistNames","artistName","royaltyPercent","personalPricing","commercialPricing","publisherEarningsPerSongPurchase_Personal","publisherEarningsPerSongPurchase_Commercial","publisherEarningsPerSongTotal_Personal","publisherEarningsPerSongTotal_Commercial","event","target","value","render","style","styles","main","children","fileName","_jsxFileName","lineNumber","columnNumber","type","color","black","filteredSongs","filter","song","toLowerCase","includes","info","icon","placeholder","onChange","className","box","item","genre","cost","cost_personal","cost_commercial","likes","timesPurchasedPersonal","times_personal_purchased","times_commercial_purchased","timesPurchasedCommercial","hash","onClick","ipfs","display","flexDirection","justifyContent","alignItems","height","gap","background","white","width","padding","borderRadius","border","overflow","boxShadow","borderColor","backgroundColor"],"sources":["C:/Users/Vendrell/Desktop/Project_v14/App/src/Components/Publisher.js"],"sourcesContent":["import React from \"react\"\r\nimport { COLORS } from \"./Colors\"\r\nimport SongCard from \"./SongCard\"\r\nimport AddSongCard from \"./AddSongCard\"\r\nimport Loader from \"react-loader-spinner\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMicrophone, faPlusSquare, faBuilding } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Publisher extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { name: \"\", artistID: \"\", artistsIDSong: [], publisherID: \"\", totalEarnings: \"\", purchased_times: 0, songIDs: [], songs: [], form: false, searchQuery: \"\" }\r\n        this.openForm = this.openForm.bind(this);\r\n        this.closeForm = this.closeForm.bind(this);\r\n        this.handleSearchChange = this.handleSearchChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadPublisherDetails().then(() => {\r\n            console.log(\"Loaded Publisher's Details\", this.state)\r\n            this.loadSongDetails().then(() => { console.log(\"Loaded Publisher's Songs\") })\r\n        })\r\n    }\r\n\r\n    async loadPublisherDetails() {\r\n        try {\r\n            const contractInstance = await this.props.contract.deployed();\r\n            const userType = await contractInstance.checkUserType.call({ from: this.props.account });\r\n            console.log(\"User Type\", userType)\r\n            const publisherDetails = await contractInstance.getPublisherDetails.call({ from: this.props.account });\r\n            let songList = [];\r\n            for (let i = 0; i < publisherDetails[3].length; i++) {\r\n                songList.push(publisherDetails[3][i].toString());\r\n            }\r\n            this.setState({\r\n                publisherID: publisherDetails[0].toString(),\r\n                name: publisherDetails[2].toString(),\r\n                songIDs: songList\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Failed to load publisher details:\", error);\r\n        }\r\n    }\r\n\r\n    async getArtistName(artistID) {\r\n        try {\r\n            const contractInstance = await this.props.contract.deployed();\r\n            // console.log('getArtistName call');\r\n\r\n            // Correctly pass the artistID to the smart contract function\r\n            const getArtistName = await contractInstance.getArtistNameByID(artistID, { from: this.props.account });\r\n            console.log('artistID is\\n', artistID);\r\n\r\n            console.log('getArtistName', getArtistName);\r\n            return getArtistName; // Assuming the function returns the artistName directly\r\n        } catch (error) {\r\n            console.error('getArtistName Error:', error);\r\n            return ''; // Return an empty string or handle the error as needed\r\n        }\r\n    }\r\n\r\n    async loadPurchasedTimes(_songID) {\r\n        console.log(\"Into Purchased Times\");\r\n        console.log(\"songID:\", _songID);\r\n        let song_id = parseInt(_songID);\r\n        const contractInstance = await this.props.contract.deployed();\r\n        // Assuming getSongPurchasedTimes now returns a struct with personalCount and commercialCount\r\n        const purchaseCounts = await contractInstance.getSongPurchasedTimes(song_id, { from: this.props.account });\r\n        console.log(\"Purchased times for song ID\", song_id, \":\", purchaseCounts);\r\n\r\n        // Extract personal and commercial purchase counts\r\n        const personalCount = purchaseCounts[0];\r\n        const commercialCount = purchaseCounts[1];\r\n\r\n        // You can now use personalCount and commercialCount as needed\r\n        // For example, you might want to update the state or display these counts in the UI\r\n\r\n        return { personalCount, commercialCount };\r\n    }\r\n\r\n    async loadSongDetails() {\r\n        console.log(\"Entering loadSongDetails function\");\r\n        const contractInstance = await this.props.contract.deployed();\r\n        console.log(\"Contract instance deployed successfully\");\r\n        let songInfoList = [];\r\n        console.log('Number of song IDs to process:', this.state.songIDs.length);\r\n\r\n        for (let i = 0; i < this.state.songIDs.length; i++) {\r\n            console.log(`Processing song ID at index ${i}:`, this.state.songIDs[i]);\r\n            let songDetails = await contractInstance.getSongDetails(this.state.songIDs[i], { from: this.props.account });\r\n            console.log(\"Song Details fetched for ID:\", songDetails[0]);\r\n            console.log(\"Sending song ID to loadPurchasedTimes:\", this.state.songIDs[i]);\r\n\r\n            // Retrieve both personal and commercial purchase counts\r\n            let purchaseCounts = await contractInstance.getSongPurchaseCounts(this.state.songIDs[i], { from: this.props.account });\r\n            console.log('Purchased times for song ID', this.state.songIDs[i], ':', purchaseCounts);\r\n\r\n            // Extract the artist ID from songDetails[8] and convert it to a string if necessary\r\n            let artistIDString = songDetails[8].toString();\r\n            console.log('artistIDString\\n', artistIDString);\r\n\r\n            let artistIDArray = artistIDString.split(',').map(Number);\r\n            console.log('artistIDArray\\n', artistIDArray, '\\n', typeof artistIDArray);\r\n\r\n            let artistNames = [];\r\n            for (let i = 0; i < artistIDArray.length; i++) {\r\n                console.log('Artist ID:', artistIDArray[i]);\r\n                let artistName = await contractInstance.getArtistNameByID(artistIDArray[i], { from: this.props.account });\r\n                console.log('Artist name fetched:', artistName);\r\n                artistNames.push(artistName);\r\n            }\r\n            console.log('timesPurchasedPersonal', purchaseCounts[0].toString())\r\n            console.log('timesPurchasedCommercial', purchaseCounts[1].toString())\r\n            let royaltyPercent = songDetails[5]; // Assuming songDetails[5] is the royalty percent\r\n            let personalPricing = songDetails[3]; // Assuming songDetails[3] is the personal pricing\r\n            let commercialPricing = songDetails[4];\r\n            console.log(\"royaltyPercent\", parseInt(royaltyPercent))\r\n            let publisherEarningsPerSongPurchase_Personal = (personalPricing * (100 - royaltyPercent)) / 100;\r\n            console.log(\"Publisher Split Personal\", publisherEarningsPerSongPurchase_Personal)\r\n            let publisherEarningsPerSongPurchase_Commercial = (commercialPricing * (100 - royaltyPercent)) / 100;\r\n            console.log(\"Publisher Split Commercial\", publisherEarningsPerSongPurchase_Commercial)\r\n            let publisherEarningsPerSongTotal_Personal = purchaseCounts[0] * publisherEarningsPerSongPurchase_Personal\r\n            let publisherEarningsPerSongTotal_Commercial = purchaseCounts[1] * publisherEarningsPerSongPurchase_Commercial\r\n            console.log(\"Revenue Personal Total for each song:\", publisherEarningsPerSongTotal_Personal)\r\n            console.log(\"Revenue Commercial Total for each song:\", publisherEarningsPerSongTotal_Commercial)\r\n            console.log(\"royaltyPercent\", parseInt(royaltyPercent))\r\n            songInfoList.push({\r\n                'name': songDetails[2],\r\n                'genre': songDetails[7],\r\n                'hash': songDetails[6],\r\n                'cost_personal': songDetails[3].toString(),\r\n                'cost_commercial': songDetails[4].toString(),\r\n                'artistsIDSong': songDetails[8].toString(),\r\n                'timesPurchasedPersonal': purchaseCounts[0].toString(), // Personal purchase count\r\n                'timesPurchasedCommercial': purchaseCounts[1].toString(), // Commercial purchase count\r\n                'artist_name': artistNames,\r\n                'publisherEarningsPerSongPurchase_Personal': publisherEarningsPerSongPurchase_Personal.toString(), // Revenue from personal purchases\r\n                'publisherEarningsPerSongPurchase_Commercial': publisherEarningsPerSongPurchase_Commercial.toString()\r\n            });\r\n            this.state.purchased_times += parseInt(purchaseCounts[0]) + parseInt(purchaseCounts[1]);\r\n            this.state.totalEarnings += parseInt(publisherEarningsPerSongTotal_Personal)+parseInt(publisherEarningsPerSongTotal_Commercial)\r\n        }\r\n\r\n        this.setState({ songs: songInfoList });\r\n        console.log(\"State updated with songInfoList\");\r\n    }\r\n\r\n    openForm() {\r\n        this.setState({ form: true })\r\n    }\r\n\r\n    closeForm() {\r\n        this.setState({ form: false })\r\n    }\r\n\r\n    handleSearchChange(event) {\r\n        this.setState({ searchQuery: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.publisherID === \"\") {\r\n            return (\r\n                <div style={styles.main}>\r\n                    <h1>Hello</h1>\r\n                    <Loader type=\"Bars\" color={COLORS.black} />\r\n                </div>\r\n            );\r\n        } else {\r\n            // Filter songs based on the search query\r\n            const filteredSongs = this.state.songs.filter(song =>\r\n                song.name.toLowerCase().includes(this.state.searchQuery.toLowerCase())\r\n            );\r\n\r\n            return (\r\n                <div style={styles.main}>\r\n                    <div style={styles.info}>\r\n                        <h1><FontAwesomeIcon icon={faBuilding} /> {this.state.name} </h1>\r\n                        <h3> Publisher ID : {this.state.publisherID} </h3>\r\n                        <h3> Total Songs Sold : {this.state.purchased_times} </h3>\r\n                    </div>\r\n                    {/* Search bar styled with Bootstrap */}\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search by song name...\"\r\n                        value={this.state.searchQuery}\r\n                        onChange={this.handleSearchChange}\r\n                        className=\"form-control mb-3 w-75\" // Bootstrap classes for styling\r\n                    />\r\n                    <div style={styles.box}>\r\n\r\n                        {filteredSongs.map((item, i) => (\r\n                            <SongCard\r\n                                type={\"publisher\"}\r\n                                name={item.name}\r\n                                genre={item.genre}\r\n                                cost={item.cost_personal}\r\n                                cost_personal={item.cost_personal}\r\n                                cost_commercial={item.cost_commercial}\r\n                                likes={item.timesPurchasedPersonal}\r\n                                times_personal_purchased={item.timesPurchasedPersonal}\r\n                                times_commercial_purchased={item.timesPurchasedCommercial}\r\n                                hash={item.hash}\r\n                                key={i}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                    <button type=\"button\" className=\"btn btn-dark btn-lg \" onClick={() => { this.openForm() }}>\r\n                        <div>Add Song <FontAwesomeIcon icon={faPlusSquare} /></div>\r\n                    </button >\r\n                    <AddSongCard\r\n                        contract={this.props.contract}\r\n                        ipfs={this.props.ipfs}\r\n                        account={this.props.account}\r\n                        form={this.state.form}\r\n                        closeForm={this.closeForm} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst styles = {\r\n    main: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\",\r\n        gap: \"5%\",\r\n        background: COLORS.white,\r\n    },\r\n    info: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    box: {\r\n        height: \"50%\",\r\n        width: \"80%\",\r\n        padding: \"2%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        borderRadius: \"30px\",\r\n        border: \"3px solid\",\r\n        overflow: \"auto\",\r\n        gap: \"2%\",\r\n        boxShadow: \"2px 5px 2px #191919\",\r\n        borderColor: COLORS.black,\r\n        backgroundColor: COLORS.white,\r\n    },\r\n}\r\n\r\nexport default Publisher;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
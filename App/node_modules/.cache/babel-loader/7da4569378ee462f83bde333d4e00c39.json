{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar multiaddr = require('multiaddr');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar responseTypes = require('./response-types.js');\nconst createFindProvs = configure.configure(api => {\n  async function* findProvs(cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const message of res.ndjson()) {\n      if (message.Type === responseTypes.Provider && message.Responses) {\n        for (const {\n          ID,\n          Addrs\n        } of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n          };\n        }\n      }\n    }\n  }\n  return findProvs;\n});\nexports.createFindProvs = createFindProvs;","map":{"version":3,"names":["Object","defineProperty","exports","value","multiaddr","require","configure","toUrlSearchParams","responseTypes","createFindProvs","api","findProvs","cid","options","res","post","signal","searchParams","arg","toString","headers","message","ndjson","Type","Provider","Responses","ID","Addrs","id","addrs","map","a","Multiaddr"],"sources":["C:/Users/Vendrell/Desktop/Project_v13/App/node_modules/ipfs-http-client/cjs/src/dht/find-provs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar multiaddr = require('multiaddr');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar responseTypes = require('./response-types.js');\n\nconst createFindProvs = configure.configure(api => {\n  async function* findProvs(cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const message of res.ndjson()) {\n      if (message.Type === responseTypes.Provider && message.Responses) {\n        for (const {ID, Addrs} of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n          };\n        }\n      }\n    }\n  }\n  return findProvs;\n});\n\nexports.createFindProvs = createFindProvs;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AACjE,IAAIG,aAAa,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAElD,MAAMI,eAAe,GAAGH,SAAS,CAACA,SAAS,CAACI,GAAG,IAAI;EACjD,gBAAgBC,SAASA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3C,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,eAAe,EAAE;MAC1CC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAEV,iBAAiB,CAACA,iBAAiB,CAAC;QAChDW,GAAG,EAAEN,GAAG,CAACO,QAAQ,CAAC,CAAC;QACnB,GAAGN;MACL,CAAC,CAAC;MACFO,OAAO,EAAEP,OAAO,CAACO;IACnB,CAAC,CAAC;IACF,WAAW,MAAMC,OAAO,IAAIP,GAAG,CAACQ,MAAM,CAAC,CAAC,EAAE;MACxC,IAAID,OAAO,CAACE,IAAI,KAAKf,aAAa,CAACgB,QAAQ,IAAIH,OAAO,CAACI,SAAS,EAAE;QAChE,KAAK,MAAM;UAACC,EAAE;UAAEC;QAAK,CAAC,IAAIN,OAAO,CAACI,SAAS,EAAE;UAC3C,MAAM;YACJG,EAAE,EAAEF,EAAE;YACNG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAE,EAAEG,GAAG,CAACC,CAAC,IAAI,IAAI3B,SAAS,CAAC4B,SAAS,CAACD,CAAC,CAAC;UAC1D,CAAC;QACH;MACF;IACF;EACF;EACA,OAAOpB,SAAS;AAClB,CAAC,CAAC;AAEFT,OAAO,CAACO,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script"}
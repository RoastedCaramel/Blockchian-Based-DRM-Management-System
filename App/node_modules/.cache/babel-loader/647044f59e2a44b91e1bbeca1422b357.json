{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar responseTypes = require('./response-types.js');\nvar fromString = require('uint8arrays/from-string');\nvar toString = require('uint8arrays/to-string');\nconst createGet = configure.configure(api => {\n  async function get(key, options = {}) {\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: key instanceof Uint8Array ? toString.toString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const message of res.ndjson()) {\n      if (message.Type === responseTypes.Value) {\n        return fromString.fromString(message.Extra, 'base64pad');\n      }\n    }\n    throw new Error('not found');\n  }\n  return get;\n});\nexports.createGet = createGet;","map":{"version":3,"names":["Object","defineProperty","exports","value","configure","require","toUrlSearchParams","responseTypes","fromString","toString","createGet","api","get","key","options","res","post","signal","searchParams","arg","Uint8Array","headers","message","ndjson","Type","Value","Extra","Error"],"sources":["C:/Users/Ashwin Rajesh/Downloads/Project_v6_vdawg/App/node_modules/ipfs-http-client/cjs/src/dht/get.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar responseTypes = require('./response-types.js');\nvar fromString = require('uint8arrays/from-string');\nvar toString = require('uint8arrays/to-string');\n\nconst createGet = configure.configure(api => {\n  async function get(key, options = {}) {\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: key instanceof Uint8Array ? toString.toString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const message of res.ndjson()) {\n      if (message.Type === responseTypes.Value) {\n        return fromString.fromString(message.Extra, 'base64pad');\n      }\n    }\n    throw new Error('not found');\n  }\n  return get;\n});\n\nexports.createGet = createGet;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,SAAS,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,gCAAgC,CAAC;AACjE,IAAIE,aAAa,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAClD,IAAIG,UAAU,GAAGH,OAAO,CAAC,yBAAyB,CAAC;AACnD,IAAII,QAAQ,GAAGJ,OAAO,CAAC,uBAAuB,CAAC;AAE/C,MAAMK,SAAS,GAAGN,SAAS,CAACA,SAAS,CAACO,GAAG,IAAI;EAC3C,eAAeC,GAAGA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,SAAS,EAAE;MACpCC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAEZ,iBAAiB,CAACA,iBAAiB,CAAC;QAChDa,GAAG,EAAEN,GAAG,YAAYO,UAAU,GAAGX,QAAQ,CAACA,QAAQ,CAACI,GAAG,CAAC,GAAGA,GAAG;QAC7D,GAAGC;MACL,CAAC,CAAC;MACFO,OAAO,EAAEP,OAAO,CAACO;IACnB,CAAC,CAAC;IACF,WAAW,MAAMC,OAAO,IAAIP,GAAG,CAACQ,MAAM,CAAC,CAAC,EAAE;MACxC,IAAID,OAAO,CAACE,IAAI,KAAKjB,aAAa,CAACkB,KAAK,EAAE;QACxC,OAAOjB,UAAU,CAACA,UAAU,CAACc,OAAO,CAACI,KAAK,EAAE,WAAW,CAAC;MAC1D;IACF;IACA,MAAM,IAAIC,KAAK,CAAC,WAAW,CAAC;EAC9B;EACA,OAAOf,GAAG;AACZ,CAAC,CAAC;AAEFV,OAAO,CAACQ,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script"}
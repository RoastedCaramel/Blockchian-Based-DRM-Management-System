{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vendrell\\\\Desktop\\\\Project_v14\\\\App\\\\src\\\\Components\\\\Artist.js\";\nimport React from \"react\";\nimport { COLORS } from \"./Colors\";\nimport SongCard from \"./SongCard\";\nimport AddSongCard from \"./AddSongCard\";\nimport Loader from \"react-loader-spinner\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophone, faPlusSquare } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Artist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      artistID: \"\",\n      totalEarnings: 0,\n      purchased_times: 0,\n      songIDs: [],\n      songs: [],\n      form: false,\n      searchQuery: \"\" // New state for search query\n    };\n    this.openForm = this.openForm.bind(this);\n    this.closeForm = this.closeForm.bind(this);\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n  }\n  componentDidMount() {\n    this.loadArtistDetails().then(() => {\n      console.log(\"Loaded Artist's Details\", this.state);\n      this.loadSongDetails().then(() => {\n        console.log(\"Loaded Artist's Songs\");\n      });\n    });\n  }\n  async loadArtistDetails() {\n    try {\n      const contractInstance = await this.props.contract.deployed();\n      const userType = await contractInstance.checkUserType.call({\n        from: this.props.account\n      });\n      console.log(\"User Type\", userType);\n      console.log(\"loading detaisl 456\");\n      const artistDetails = await contractInstance.getArtistDetails.call({\n        from: this.props.account\n      });\n      console.log(\"Artist Details:\", artistDetails);\n      console.log(\"loading detaisl 123\");\n      let songList = [];\n      for (let i = 0; i < artistDetails[3].length; i++) {\n        songList.push(artistDetails[3][i].toString());\n      }\n      this.setState({\n        artistID: artistDetails[0].toString(),\n        name: artistDetails[2].toString(),\n        songIDs: songList\n      });\n    } catch (error) {\n      console.error(\"Failed to load artist details:\", error);\n    }\n  }\n  async getPublisherName(publisherID) {\n    try {\n      const contractInstance = await this.props.contract.deployed();\n      // console.log('getPublisherName call');\n\n      // Correctly pass the publisherID to the smart contract function\n      const getPublisherName = await contractInstance.getPublisherNameByID(publisherID, {\n        from: this.props.account\n      });\n      console.log('publisherID is\\n', publisherID);\n      console.log('getPublisherName', getPublisherName);\n      return getPublisherName; // Assuming the function returns the publisherName directly\n    } catch (error) {\n      console.error('getPublisherName Error:', error);\n      return ''; // Return an empty string or handle the error as needed\n    }\n  }\n  async loadPurchasedTimes(_songID) {\n    console.log(\"Into Purchased Times\");\n    console.log(\"songID:\", _songID);\n    let song_id = parseInt(_songID);\n    const contractInstance = await this.props.contract.deployed();\n    // Assuming getSongPurchasedTimes now returns a struct with personalCount and commercialCount\n    const purchaseCounts = await contractInstance.getSongPurchasedTimes(song_id, {\n      from: this.props.account\n    });\n    console.log(\"Purchased times for song ID\", song_id, \":\", purchaseCounts);\n\n    // Extract personal and commercial purchase counts\n    const personalCount = purchaseCounts[0];\n    const commercialCount = purchaseCounts[1];\n\n    // You can now use personalCount and commercialCount as needed\n    // For example, you might want to update the state or display these counts in the UI\n\n    return {\n      personalCount,\n      commercialCount\n    };\n  }\n  async loadSongDetails() {\n    console.log(\"Going into loadSongDetails\");\n    const contractInstance = await this.props.contract.deployed();\n    let songInfoList = [];\n    console.log('this.state.songIDs.length\\n', this.state.songIDs);\n    for (let i = 0; i < this.state.songIDs.length; i++) {\n      let songDetails = await contractInstance.getSongDetails(this.state.songIDs[i], {\n        from: this.props.account\n      });\n      console.log('i value ', i);\n\n      // Extract the publisher ID from songDetails[1] and convert it to a string if necessary\n      let publisherID = songDetails[1].toString();\n      console.log(\"PublisherID:\\n\", songDetails[1].toString());\n\n      // Call the getPublisherNameByID function to get the publisher name\n      let publisherName = await contractInstance.getPublisherNameByID(publisherID, {\n        from: this.props.account\n      });\n      console.log('the publisherName is: \\n', publisherName);\n\n      // Retrieve both personal and commercial purchase counts\n      let purchaseCounts = await contractInstance.getSongPurchaseCounts(this.state.songIDs[i], {\n        from: this.props.account\n      });\n      console.log('Purchased times for song ID', this.state.songIDs[i], ':', purchaseCounts);\n      console.log('timesPurchasedPersonal', purchaseCounts[0].toString());\n      console.log('timesPurchasedCommercial', purchaseCounts[1].toString());\n      let royaltyPercent = songDetails[5]; // Assuming songDetails[5] is the royalty percent\n      let personalPricing = songDetails[3]; // Assuming songDetails[3] is the personal pricing\n      let commercialPricing = songDetails[4];\n      console.log(\"royaltyPercent\", parseInt(royaltyPercent));\n      let artistEarningsPerSongPurchase_Personal = personalPricing * royaltyPercent / 100;\n      console.log(\"artist Split Personal\", artistEarningsPerSongPurchase_Personal);\n      let artistEarningsPerSongPurchase_Commercial = commercialPricing * royaltyPercent / 100;\n      console.log(\"artist Split Commercial\", artistEarningsPerSongPurchase_Commercial);\n      let artistEarningsPerSongTotal_Personal = purchaseCounts[0] * artistEarningsPerSongPurchase_Personal;\n      let artistEarningsPerSongTotal_Commercial = purchaseCounts[1] * artistEarningsPerSongPurchase_Commercial;\n      console.log(\"Revenue Personal Total for each song:\", artistEarningsPerSongTotal_Personal);\n      console.log(\"Revenue Commercial Total for each song:\", artistEarningsPerSongTotal_Commercial);\n      console.log(\"royaltyPercent\", parseInt(royaltyPercent));\n      let timePurchasedTotal = parseInt(purchaseCounts[0]) + parseInt(purchaseCounts[1]);\n      songInfoList.push({\n        'name': songDetails[2],\n        'genre': songDetails[7],\n        'hash': songDetails[6],\n        'cost_personal': songDetails[3].toString(),\n        'cost_commercial': songDetails[4].toString(),\n        'publisher_name': publisherName,\n        'timesPurchasedPersonal': purchaseCounts[0].toString(),\n        // Personal purchase count\n        'timesPurchasedCommercial': purchaseCounts[1].toString(),\n        // Commercial purchase count\n        'timePurchasedTotal': timePurchasedTotal.toString(),\n        'artistEarningsPerSongPurchase_Personal': artistEarningsPerSongPurchase_Personal.toString(),\n        // Revenue from personal purchases\n        'artistEarningsPerSongPurchase_Commercial': artistEarningsPerSongPurchase_Commercial.toString()\n      });\n      this.state.purchased_times += parseInt(purchaseCounts[0]) + parseInt(purchaseCounts[1]);\n      this.state.totalEarnings += parseInt(artistEarningsPerSongTotal_Personal) + parseInt(artistEarningsPerSongTotal_Commercial);\n    }\n    console.log('songInfoList is \\n', songInfoList);\n    this.setState({\n      songs: songInfoList\n    });\n    this.state.totalEarningsETH = this.state.totalEarnings / 1000000000000000000;\n  }\n  openForm() {\n    this.setState({\n      form: true\n    });\n  }\n  closeForm() {\n    this.setState({\n      form: false\n    });\n  }\n  handleSearchChange(event) {\n    this.setState({\n      searchQuery: event.target.value\n    });\n  }\n  render() {\n    if (this.state.artistID === \"\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.main,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Connecting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Loader, {\n          type: \"Bars\",\n          color: COLORS.black\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this);\n    } else {\n      // Filter songs based on the search query\n      const filteredSongs = this.state.songs.filter(song => song.name.toLowerCase().includes(this.state.searchQuery.toLowerCase()));\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.main,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.info,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faMicrophone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 29\n            }, this), \" \", this.state.name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\" Artist ID : \", this.state.artistID, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\" Totals Songs sold : \", this.state.purchased_times, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Total Earnings : \", this.state.totalEarningsETH, \" ETH\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search by song name...\",\n          value: this.state.searchQuery,\n          onChange: this.handleSearchChange,\n          className: \"form-control mb-3 w-75 h-100\" // Adding h-100 class to increase height\n          ,\n          style: {\n            fontSize: \"20px\"\n          } // Inline style to increase font size\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.box,\n          children: filteredSongs.map((item, i) => /*#__PURE__*/_jsxDEV(SongCard, {\n            type: \"artist\",\n            name: item.name,\n            genre: item.genre,\n            cost: item.cost_personal,\n            cost_personal: item.cost_personal,\n            cost_commercial: item.cost_commercial\n            // likes={item.timesPurchased}\n            ,\n            totalTimesPurchasedSong: item.timePurchasedTotal,\n            times_personal_purchased: item.timesPurchasedPersonal,\n            times_commercial_purchased: item.timesPurchasedCommercial,\n            publisherName: item.publisher_name,\n            hash: item.hash\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this);\n    }\n  }\n}\nconst styles = {\n  main: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100vh\",\n    gap: \"5%\",\n    background: COLORS.white\n  },\n  info: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  box: {\n    height: \"50%\",\n    width: \"80%\",\n    padding: \"2%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    borderRadius: \"30px\",\n    border: \"3px solid\",\n    overflow: \"auto\",\n    gap: \"2%\",\n    boxShadow: \"2px 5px 2px #191919\",\n    borderColor: COLORS.black,\n    backgroundColor: COLORS.white\n  }\n};\nexport default Artist;","map":{"version":3,"names":["React","COLORS","SongCard","AddSongCard","Loader","FontAwesomeIcon","faMicrophone","faPlusSquare","jsxDEV","_jsxDEV","Artist","Component","constructor","props","state","name","artistID","totalEarnings","purchased_times","songIDs","songs","form","searchQuery","openForm","bind","closeForm","handleSearchChange","componentDidMount","loadArtistDetails","then","console","log","loadSongDetails","contractInstance","contract","deployed","userType","checkUserType","call","from","account","artistDetails","getArtistDetails","songList","i","length","push","toString","setState","error","getPublisherName","publisherID","getPublisherNameByID","loadPurchasedTimes","_songID","song_id","parseInt","purchaseCounts","getSongPurchasedTimes","personalCount","commercialCount","songInfoList","songDetails","getSongDetails","publisherName","getSongPurchaseCounts","royaltyPercent","personalPricing","commercialPricing","artistEarningsPerSongPurchase_Personal","artistEarningsPerSongPurchase_Commercial","artistEarningsPerSongTotal_Personal","artistEarningsPerSongTotal_Commercial","timePurchasedTotal","totalEarningsETH","event","target","value","render","style","styles","main","children","fileName","_jsxFileName","lineNumber","columnNumber","type","color","black","filteredSongs","filter","song","toLowerCase","includes","info","icon","placeholder","onChange","className","fontSize","box","map","item","genre","cost","cost_personal","cost_commercial","totalTimesPurchasedSong","times_personal_purchased","timesPurchasedPersonal","times_commercial_purchased","timesPurchasedCommercial","publisher_name","hash","display","flexDirection","justifyContent","alignItems","height","gap","background","white","width","padding","borderRadius","border","overflow","boxShadow","borderColor","backgroundColor"],"sources":["C:/Users/Vendrell/Desktop/Project_v14/App/src/Components/Artist.js"],"sourcesContent":["import React from \"react\"\r\nimport { COLORS } from \"./Colors\"\r\nimport SongCard from \"./SongCard\"\r\nimport AddSongCard from \"./AddSongCard\"\r\nimport Loader from \"react-loader-spinner\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMicrophone, faPlusSquare } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Artist extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\", artistID: \"\", totalEarnings: 0, purchased_times: 0, songIDs: [], songs: [], form: false, searchQuery: \"\" // New state for search query\r\n        }\r\n        this.openForm = this.openForm.bind(this);\r\n        this.closeForm = this.closeForm.bind(this);\r\n        this.handleSearchChange = this.handleSearchChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadArtistDetails().then(() => {\r\n            console.log(\"Loaded Artist's Details\", this.state)\r\n            this.loadSongDetails().then(() => { console.log(\"Loaded Artist's Songs\") })\r\n        })\r\n    }\r\n\r\n    async loadArtistDetails() {\r\n        try {\r\n            const contractInstance = await this.props.contract.deployed();\r\n            const userType = await contractInstance.checkUserType.call({ from: this.props.account });\r\n            console.log(\"User Type\", userType)\r\n            console.log(\"loading detaisl 456\")\r\n            const artistDetails = await contractInstance.getArtistDetails.call({ from: this.props.account });\r\n            console.log(\"Artist Details:\", artistDetails)\r\n            console.log(\"loading detaisl 123\")\r\n            let songList = [];\r\n            for (let i = 0; i < artistDetails[3].length; i++) {\r\n                songList.push(artistDetails[3][i].toString());\r\n            }\r\n            this.setState({\r\n                artistID: artistDetails[0].toString(),\r\n                name: artistDetails[2].toString(),\r\n                songIDs: songList\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Failed to load artist details:\", error);\r\n        }\r\n    }\r\n\r\n    async getPublisherName(publisherID) {\r\n        try {\r\n            const contractInstance = await this.props.contract.deployed();\r\n            // console.log('getPublisherName call');\r\n\r\n            // Correctly pass the publisherID to the smart contract function\r\n            const getPublisherName = await contractInstance.getPublisherNameByID(publisherID, { from: this.props.account });\r\n            console.log('publisherID is\\n', publisherID)\r\n\r\n            console.log('getPublisherName', getPublisherName)\r\n            return getPublisherName; // Assuming the function returns the publisherName directly\r\n        } catch (error) {\r\n            console.error('getPublisherName Error:', error);\r\n            return ''; // Return an empty string or handle the error as needed\r\n        }\r\n    }\r\n\r\n    async loadPurchasedTimes(_songID) {\r\n        console.log(\"Into Purchased Times\");\r\n        console.log(\"songID:\", _songID);\r\n        let song_id = parseInt(_songID);\r\n        const contractInstance = await this.props.contract.deployed();\r\n        // Assuming getSongPurchasedTimes now returns a struct with personalCount and commercialCount\r\n        const purchaseCounts = await contractInstance.getSongPurchasedTimes(song_id, { from: this.props.account });\r\n        console.log(\"Purchased times for song ID\", song_id, \":\", purchaseCounts);\r\n\r\n        // Extract personal and commercial purchase counts\r\n        const personalCount = purchaseCounts[0];\r\n        const commercialCount = purchaseCounts[1];\r\n\r\n        // You can now use personalCount and commercialCount as needed\r\n        // For example, you might want to update the state or display these counts in the UI\r\n\r\n        return { personalCount, commercialCount };\r\n    }\r\n\r\n\r\n\r\n\r\n    async loadSongDetails() {\r\n        console.log(\"Going into loadSongDetails\");\r\n        const contractInstance = await this.props.contract.deployed();\r\n        let songInfoList = [];\r\n        console.log('this.state.songIDs.length\\n', this.state.songIDs);\r\n\r\n        for (let i = 0; i < this.state.songIDs.length; i++) {\r\n            let songDetails = await contractInstance.getSongDetails(this.state.songIDs[i], { from: this.props.account });\r\n            console.log('i value ', i);\r\n\r\n            // Extract the publisher ID from songDetails[1] and convert it to a string if necessary\r\n            let publisherID = songDetails[1].toString();\r\n            console.log(\"PublisherID:\\n\", songDetails[1].toString())\r\n\r\n            // Call the getPublisherNameByID function to get the publisher name\r\n            let publisherName = await contractInstance.getPublisherNameByID(publisherID, { from: this.props.account });\r\n            console.log('the publisherName is: \\n', publisherName);\r\n\r\n            // Retrieve both personal and commercial purchase counts\r\n            let purchaseCounts = await contractInstance.getSongPurchaseCounts(this.state.songIDs[i], { from: this.props.account });\r\n            console.log('Purchased times for song ID', this.state.songIDs[i], ':', purchaseCounts);\r\n\r\n            console.log('timesPurchasedPersonal', purchaseCounts[0].toString())\r\n            console.log('timesPurchasedCommercial', purchaseCounts[1].toString())\r\n\r\n            let royaltyPercent = songDetails[5]; // Assuming songDetails[5] is the royalty percent\r\n            let personalPricing = songDetails[3]; // Assuming songDetails[3] is the personal pricing\r\n            let commercialPricing = songDetails[4];\r\n            console.log(\"royaltyPercent\", parseInt(royaltyPercent))\r\n            let artistEarningsPerSongPurchase_Personal = (personalPricing * royaltyPercent) / 100;\r\n            console.log(\"artist Split Personal\", artistEarningsPerSongPurchase_Personal)\r\n            let artistEarningsPerSongPurchase_Commercial = (commercialPricing * (royaltyPercent)) / 100;\r\n            console.log(\"artist Split Commercial\", artistEarningsPerSongPurchase_Commercial)\r\n            let artistEarningsPerSongTotal_Personal = purchaseCounts[0] * artistEarningsPerSongPurchase_Personal\r\n            let artistEarningsPerSongTotal_Commercial = purchaseCounts[1] * artistEarningsPerSongPurchase_Commercial\r\n            console.log(\"Revenue Personal Total for each song:\", artistEarningsPerSongTotal_Personal)\r\n            console.log(\"Revenue Commercial Total for each song:\", artistEarningsPerSongTotal_Commercial)\r\n            console.log(\"royaltyPercent\", parseInt(royaltyPercent))\r\n            let timePurchasedTotal = parseInt(purchaseCounts[0]) + parseInt(purchaseCounts[1])\r\n\r\n            songInfoList.push({\r\n                'name': songDetails[2],\r\n                'genre': songDetails[7],\r\n                'hash': songDetails[6],\r\n                'cost_personal': songDetails[3].toString(),\r\n                'cost_commercial': songDetails[4].toString(),\r\n                'publisher_name': publisherName,\r\n                'timesPurchasedPersonal': purchaseCounts[0].toString(), // Personal purchase count\r\n                'timesPurchasedCommercial': purchaseCounts[1].toString(), // Commercial purchase count\r\n                'timePurchasedTotal': timePurchasedTotal.toString(),\r\n                'artistEarningsPerSongPurchase_Personal': artistEarningsPerSongPurchase_Personal.toString(), // Revenue from personal purchases\r\n                'artistEarningsPerSongPurchase_Commercial': artistEarningsPerSongPurchase_Commercial.toString()\r\n            });\r\n            this.state.purchased_times += parseInt(purchaseCounts[0]) + parseInt(purchaseCounts[1]);\r\n            this.state.totalEarnings += parseInt(artistEarningsPerSongTotal_Personal) + parseInt(artistEarningsPerSongTotal_Commercial)\r\n        }\r\n        console.log('songInfoList is \\n', songInfoList);\r\n\r\n        this.setState({ songs: songInfoList });\r\n        this.state.totalEarningsETH = this.state.totalEarnings / 1000000000000000000;\r\n    }\r\n\r\n\r\n    openForm() {\r\n        this.setState({ form: true })\r\n    }\r\n\r\n    closeForm() {\r\n        this.setState({ form: false })\r\n    }\r\n\r\n    handleSearchChange(event) {\r\n        this.setState({ searchQuery: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.artistID === \"\") {\r\n            return (\r\n                <div style={styles.main}>\r\n                    <h1>Connecting</h1>\r\n                    <Loader type=\"Bars\" color={COLORS.black} />\r\n                </div>\r\n            );\r\n        } else {\r\n            // Filter songs based on the search query\r\n            const filteredSongs = this.state.songs.filter(song =>\r\n                song.name.toLowerCase().includes(this.state.searchQuery.toLowerCase())\r\n            );\r\n\r\n            return (\r\n                <div style={styles.main}>\r\n                    <div style={styles.info}>\r\n                        <h1><FontAwesomeIcon icon={faMicrophone} /> {this.state.name} </h1>\r\n                        <h3> Artist ID : {this.state.artistID} </h3>\r\n                        <h3> Totals Songs sold : {this.state.purchased_times} </h3>\r\n                        <h3>Total Earnings : {this.state.totalEarningsETH} ETH</h3>\r\n                    </div>\r\n                    {/* Search bar styled with Bootstrap */}\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search by song name...\"\r\n                        value={this.state.searchQuery}\r\n                        onChange={this.handleSearchChange}\r\n                        className=\"form-control mb-3 w-75 h-100\" // Adding h-100 class to increase height\r\n                        style={{ fontSize: \"20px\" }} // Inline style to increase font size\r\n                    />\r\n                    <div style={styles.box}>\r\n\r\n                        {filteredSongs.map((item, i) => (\r\n                            <SongCard\r\n                                type={\"artist\"}\r\n                                name={item.name}\r\n                                genre={item.genre}\r\n                                cost={item.cost_personal}\r\n                                cost_personal={item.cost_personal}\r\n                                cost_commercial={item.cost_commercial}\r\n                                // likes={item.timesPurchased}\r\n                                totalTimesPurchasedSong={item.timePurchasedTotal}\r\n                                times_personal_purchased={item.timesPurchasedPersonal}\r\n                                times_commercial_purchased={item.timesPurchasedCommercial}\r\n                                publisherName={item.publisher_name}\r\n                                hash={item.hash}\r\n                                key={i}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                    {/* <h1><FontAwesomeIcon icon={faPlusSquare} onClick={() => { this.openForm() }} /></h1> */}\r\n                    {/* <AddSongCard contract={this.props.contract} ipfs={this.props.ipfs} account={this.props.account} form={this.state.form} closeForm={this.closeForm} /> */}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    main: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\",\r\n        gap: \"5%\",\r\n        background: COLORS.white,\r\n    },\r\n    info: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    box: {\r\n        height: \"50%\",\r\n        width: \"80%\",\r\n        padding: \"2%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        borderRadius: \"30px\",\r\n        border: \"3px solid\",\r\n        overflow: \"auto\",\r\n        gap: \"2%\",\r\n        boxShadow: \"2px 5px 2px #191919\",\r\n        borderColor: COLORS.black,\r\n        backgroundColor: COLORS.white,\r\n    },\r\n}\r\n\r\nexport default Artist;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
[{"C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\index.js":"1","C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\App.js":"2","C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\Login.js":"3","C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\Personal.js":"4","C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\Artist.js":"5","C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\Colors.js":"6","C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\CommercialEntity.js":"7","C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\SongCard.js":"8","C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\AddSongCard.js":"9","C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\RecordLabel.js":"10"},{"size":250,"mtime":1707731148000,"results":"11","hashOfConfig":"12"},{"size":573,"mtime":1715020288923,"results":"13","hashOfConfig":"12"},{"size":7881,"mtime":1715022387239,"results":"14","hashOfConfig":"12"},{"size":13621,"mtime":1715022860035,"results":"15","hashOfConfig":"12"},{"size":12140,"mtime":1709579948312,"results":"16","hashOfConfig":"12"},{"size":236,"mtime":1707731148000,"results":"17","hashOfConfig":"12"},{"size":12644,"mtime":1715023225086,"results":"18","hashOfConfig":"12"},{"size":13879,"mtime":1715023102087,"results":"19","hashOfConfig":"12"},{"size":8876,"mtime":1715024079249,"results":"20","hashOfConfig":"12"},{"size":12905,"mtime":1715023122177,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"18dwhmw",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\index.js",[],["44","45"],"C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\App.js",[],"C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\Login.js",[],"C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\Personal.js",[],"C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\Artist.js",["46","47","48"],"import React from \"react\"\r\nimport { COLORS } from \"./Colors\"\r\nimport SongCard from \"./SongCard\"\r\nimport Loader from \"react-loader-spinner\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMicrophone } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Artist extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\", artistID: \"\", totalEarnings: 0, purchased_times: 0, songIDs: [], songs: [], form: false, searchQuery: \"\" // New state for search query\r\n        }\r\n        this.openForm = this.openForm.bind(this);\r\n        this.closeForm = this.closeForm.bind(this);\r\n        this.handleSearchChange = this.handleSearchChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadArtistDetails().then(() => {\r\n            console.log(\"Loaded Artist's Details\", this.state)\r\n            this.loadSongDetails().then(() => { console.log(\"Loaded Artist's Songs\") })\r\n        })\r\n    }\r\n\r\n    async loadArtistDetails() {\r\n        try {\r\n            const contractInstance = await this.props.contract.deployed();\r\n            const userType = await contractInstance.checkUserType.call({ from: this.props.account });\r\n            console.log(\"User Type\", userType)\r\n            console.log(\"loading detaisl 456\")\r\n            const artistDetails = await contractInstance.getArtistDetails.call({ from: this.props.account });\r\n            console.log(\"Artist Details:\", artistDetails)\r\n            console.log(\"loading detaisl 123\")\r\n            let songList = [];\r\n            for (let i = 0; i < artistDetails[3].length; i++) {\r\n                songList.push(artistDetails[3][i].toString());\r\n            }\r\n            this.setState({\r\n                artistID: artistDetails[0].toString(),\r\n                name: artistDetails[2].toString(),\r\n                songIDs: songList\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Failed to load artist details:\", error);\r\n        }\r\n    }\r\n\r\n    async getPublisherName(publisherID) {\r\n        try {\r\n            const contractInstance = await this.props.contract.deployed();\r\n            // console.log('getPublisherName call');\r\n\r\n            // Correctly pass the publisherID to the smart contract function\r\n            const getPublisherName = await contractInstance.getPublisherNameByID(publisherID, { from: this.props.account });\r\n            console.log('publisherID is\\n', publisherID)\r\n\r\n            console.log('getPublisherName', getPublisherName)\r\n            return getPublisherName; // Assuming the function returns the publisherName directly\r\n        } catch (error) {\r\n            console.error('getPublisherName Error:', error);\r\n            return ''; // Return an empty string or handle the error as needed\r\n        }\r\n    }\r\n\r\n    async loadPurchasedTimes(_songID) {\r\n        console.log(\"Into Purchased Times\");\r\n        console.log(\"songID:\", _songID);\r\n        let song_id = parseInt(_songID);\r\n        const contractInstance = await this.props.contract.deployed();\r\n        // Assuming getSongPurchasedTimes now returns a struct with personalCount and commercialCount\r\n        const purchaseCounts = await contractInstance.getSongPurchasedTimes(song_id, { from: this.props.account });\r\n        console.log(\"Purchased times for song ID\", song_id, \":\", purchaseCounts);\r\n\r\n        // Extract personal and commercial purchase counts\r\n        const personalCount = purchaseCounts[0];\r\n        const commercialCount = purchaseCounts[1];\r\n\r\n        // You can now use personalCount and commercialCount as needed\r\n        // For example, you might want to update the state or display these counts in the UI\r\n\r\n        return { personalCount, commercialCount };\r\n    }\r\n\r\n\r\n\r\n\r\n    async loadSongDetails() {\r\n        console.log(\"Going into loadSongDetails\");\r\n        const contractInstance = await this.props.contract.deployed();\r\n        let songInfoList = [];\r\n        console.log('this.state.songIDs.length\\n', this.state.songIDs);\r\n\r\n        for (let i = 0; i < this.state.songIDs.length; i++) {\r\n            let songDetails = await contractInstance.getSongDetails(this.state.songIDs[i], { from: this.props.account });\r\n            console.log('i value ', i);\r\n\r\n\r\n            // Extract the publisher ID from songDetails[1] and convert it to a string if necessary\r\n            let publisherID = songDetails[1].toString();\r\n            console.log(\"PublisherID:\\n\", songDetails[1].toString())\r\n            // Call the getPublisherNameByID function to get the publisher name\r\n            let publisherName = await contractInstance.getPublisherNameByID(publisherID, { from: this.props.account });\r\n            console.log('the publisherName is: \\n', publisherName);\r\n\r\n\r\n            // Retrieve both personal and commercial purchase counts\r\n            let purchaseCounts = await contractInstance.getSongPurchaseCounts(this.state.songIDs[i], { from: this.props.account });\r\n            console.log('Purchased times for song ID', this.state.songIDs[i], ':', purchaseCounts);\r\n\r\n            console.log('timesPurchasedPersonal', purchaseCounts[0].toString())\r\n            console.log('timesPurchasedCommercial', purchaseCounts[1].toString())\r\n\r\n            let royaltyPercent = songDetails[5]; // Assuming songDetails[5] is the royalty percent\r\n            let personalPricing = songDetails[3]; // Assuming songDetails[3] is the personal pricing\r\n            let commercialPricing = songDetails[4];\r\n            console.log(\"royaltyPercent\", parseInt(royaltyPercent))\r\n            let artistEarningsPerSongPurchase_Personal = (personalPricing * royaltyPercent) / 100;\r\n            console.log(\"artist Split Personal\", artistEarningsPerSongPurchase_Personal)\r\n            let artistEarningsPerSongPurchase_Commercial = (commercialPricing * (royaltyPercent)) / 100;\r\n            console.log(\"artist Split Commercial\", artistEarningsPerSongPurchase_Commercial)\r\n            let artistEarningsPerSongTotal_Personal = purchaseCounts[0] * artistEarningsPerSongPurchase_Personal\r\n            let artistEarningsPerSongTotal_Commercial = purchaseCounts[1] * artistEarningsPerSongPurchase_Commercial\r\n            console.log(\"Revenue Personal Total for each song:\", artistEarningsPerSongTotal_Personal)\r\n            console.log(\"Revenue Commercial Total for each song:\", artistEarningsPerSongTotal_Commercial)\r\n            console.log(\"royaltyPercent\", parseInt(royaltyPercent))\r\n            let timePurchasedTotal = parseInt(purchaseCounts[0]) + parseInt(purchaseCounts[1])\r\n            let artistEarningsPerSong_Total=parseInt(artistEarningsPerSongPurchase_Personal)+parseInt(artistEarningsPerSongPurchase_Commercial)\r\n\r\n            songInfoList.push({\r\n                'name': songDetails[2],\r\n                'genre': songDetails[7],\r\n                'hash': songDetails[6],\r\n                'cost_personal': songDetails[3].toString(),\r\n                'cost_commercial': songDetails[4].toString(),\r\n                'publisher_name': publisherName,\r\n                'timesPurchasedPersonal': purchaseCounts[0].toString(), // Personal purchase count\r\n                'timesPurchasedCommercial': purchaseCounts[1].toString(), // Commercial purchase count\r\n                'timePurchasedTotal': timePurchasedTotal.toString(),\r\n                'artistEarningsPerSongPurchase_Personal': artistEarningsPerSongPurchase_Personal.toString(), // Revenue from personal purchases\r\n                'artistEarningsPerSongPurchase_Commercial': artistEarningsPerSongPurchase_Commercial.toString(),\r\n                'artistEarningsPerSong_Total': artistEarningsPerSong_Total.toString()\r\n            });\r\n            this.state.purchased_times += parseInt(purchaseCounts[0]) + parseInt(purchaseCounts[1]);\r\n            this.state.totalEarnings += parseInt(artistEarningsPerSongTotal_Personal) + parseInt(artistEarningsPerSongTotal_Commercial)\r\n        }\r\n        console.log('songInfoList is \\n', songInfoList);\r\n\r\n        this.setState({ songs: songInfoList });\r\n        this.state.totalEarningsETH = this.state.totalEarnings / 1000000000000000000;\r\n    }\r\n\r\n\r\n    openForm() {\r\n        this.setState({ form: true })\r\n    }\r\n\r\n    closeForm() {\r\n        this.setState({ form: false })\r\n    }\r\n\r\n    handleSearchChange(event) {\r\n        this.setState({ searchQuery: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.artistID === \"\") {\r\n            return (\r\n                <div style={styles.main}>\r\n                    <h1>Connecting</h1>\r\n                    <Loader type=\"Bars\" color={COLORS.black} />\r\n                </div>\r\n            );\r\n        } else {\r\n            // Filter songs based on the search query\r\n            const filteredSongs = this.state.songs.filter(song =>\r\n                song.name.toLowerCase().includes(this.state.searchQuery.toLowerCase())\r\n            );\r\n\r\n            return (\r\n                <div style={styles.main}>\r\n                    <div style={styles.info}>\r\n                        <h1><FontAwesomeIcon icon={faMicrophone} /> {this.state.name} </h1>\r\n                        <h3> Artist ID : {this.state.artistID} </h3>\r\n                        <h3> Totals Songs sold : {this.state.purchased_times} </h3>\r\n                        <h3>Total Earnings : {this.state.totalEarningsETH} ETH</h3>\r\n                    </div>\r\n                    {/* Search bar  */}\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search by song name...\"\r\n                        value={this.state.searchQuery}\r\n                        onChange={this.handleSearchChange}\r\n                        className=\"form-control w-75 h-20\" // Adding h-100 class to increase height\r\n                        style={{ fontSize: \"20px\" }} // Inline style to increase font size\r\n                    />\r\n                    <div style={styles.box}>\r\n\r\n                        {filteredSongs.map((item, i) => (\r\n                            <SongCard\r\n                                type={\"artist\"}\r\n                                name={item.name}\r\n                                genre={item.genre}\r\n                                cost={item.cost_personal}\r\n                                cost_personal={item.cost_personal}\r\n                                cost_commercial={item.cost_commercial}\r\n                                // likes={item.timesPurchased}\r\n                                totalTimesPurchasedSong={item.timePurchasedTotal}\r\n                                times_personal_purchased={item.timesPurchasedPersonal}\r\n                                times_commercial_purchased={item.timesPurchasedCommercial}\r\n                                artistEarningsPerSong_Total={item.artistEarningsPerSong_Total}\r\n                                publisherName={item.publisher_name}\r\n                                hash={item.hash}\r\n                                key={i}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                    {/* <h1><FontAwesomeIcon icon={faPlusSquare} onClick={() => { this.openForm() }} /></h1> */}\r\n                    {/* <AddSongCard contract={this.props.contract} ipfs={this.props.ipfs} account={this.props.account} form={this.state.form} closeForm={this.closeForm} /> */}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    main: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\",\r\n        gap: \"5%\",\r\n        background: COLORS.white,\r\n    },\r\n    info: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    box: {\r\n        height: \"50%\",\r\n        width: \"80%\",\r\n        padding: \"2%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        borderRadius: \"30px\",\r\n        border: \"3px solid\",\r\n        overflow: \"auto\",\r\n        gap: \"2%\",\r\n        boxShadow: \"2px 5px 2px #191919\",\r\n        borderColor: COLORS.black,\r\n        backgroundColor: COLORS.white,\r\n    },\r\n}\r\n\r\nexport default Artist;","C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\Colors.js",[],"C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\CommercialEntity.js",["49"],"C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\SongCard.js",["50"],"C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\AddSongCard.js",[],"C:\\Users\\Vendrell\\Desktop\\Project_v16\\App\\src\\Components\\RecordLabel.js",["51","52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":146,"column":13,"nodeType":"60","messageId":"61","endLine":146,"endColumn":23},{"ruleId":"58","severity":1,"message":"59","line":147,"column":13,"nodeType":"60","messageId":"61","endLine":147,"endColumn":23},{"ruleId":"58","severity":1,"message":"59","line":152,"column":9,"nodeType":"60","messageId":"61","endLine":152,"endColumn":19},{"ruleId":"62","severity":1,"message":"63","line":302,"column":7,"nodeType":"64","messageId":"65","endLine":302,"endColumn":13},{"ruleId":"58","severity":1,"message":"59","line":113,"column":5,"nodeType":"60","messageId":"61","endLine":113,"endColumn":21},{"ruleId":"58","severity":1,"message":"59","line":147,"column":13,"nodeType":"60","messageId":"61","endLine":147,"endColumn":23},{"ruleId":"58","severity":1,"message":"59","line":148,"column":13,"nodeType":"60","messageId":"61","endLine":148,"endColumn":23},{"ruleId":"58","severity":1,"message":"59","line":152,"column":9,"nodeType":"60","messageId":"61","endLine":152,"endColumn":19},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","no-unused-vars","'styles' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]